Vagrant.configure("2") do |config|
  config.vm.box = "ubuntu/focal64"
  config.vm.box_check_update = false

  config.vm.provider "virtualbox" do |vb|
    vb.memory = "3072"
    vb.cpus = 2
  end

  config.vm.define "kmaster" do |kmaster|
    kmaster.vm.hostname = "kmaster"
    kmaster.vm.network "private_network", ip: "192.168.56.10"

    # Sync Wisecow-App folder to VM
    config.vm.synced_folder ".", "/vagrant"

    kmaster.vm.provision "shell", inline: <<-SHELL
      set -e

      # Update and install dependencies
      sudo apt-get update -y
      sudo apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release docker.io

      # Add Kubernetes repo
      sudo mkdir -p /etc/apt/keyrings
      curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
      echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /" | sudo tee /etc/apt/sources.list.d/kubernetes.list

      # Install kubeadm, kubelet, kubectl
      sudo apt-get update -y
      sudo apt-get install -y kubelet kubeadm kubectl
      sudo apt-mark hold kubelet kubeadm kubectl

      # Enable Docker
      sudo systemctl enable docker
      sudo systemctl start docker

      # Initialize Kubernetes cluster
      sudo kubeadm init --apiserver-advertise-address=192.168.56.10 --pod-network-cidr=192.168.0.0/16

      # Setup kubeconfig for vagrant user
      mkdir -p /home/vagrant/.kube
      sudo cp -i /etc/kubernetes/admin.conf /home/vagrant/.kube/config
      sudo chown vagrant:vagrant /home/vagrant/.kube/config
      export KUBECONFIG=/home/vagrant/.kube/config

      # Allow workloads on master
      sudo -u vagrant kubectl taint nodes --all node-role.kubernetes.io/control-plane- || true

      echo "=== Waiting for Kubernetes API ==="
      until sudo -u vagrant kubectl get nodes &>/dev/null; do
        echo "API not ready, sleeping..."
        sleep 5
      done

      # Install Calico
      sudo -u vagrant kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.27.3/manifests/calico.yaml

      echo "=== Waiting for Calico pods ==="
      until [ $(sudo -u vagrant kubectl get pods -n kube-system -l k8s-app=calico-node --no-headers 2>/dev/null | wc -l) -gt 0 ] && \
            [ $(sudo -u vagrant kubectl get pods -n kube-system -l k8s-app=calico-node -o jsonpath='{.items[*].status.containerStatuses[*].ready}' | grep -c false || true) -eq 0 ]; do
        echo "Still waiting for Calico..."
        sleep 5
      done
      echo "Calico is ready!"

      #  # --- Install Helm ---
      # curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
      # helm version

      # # --- Setup cert-manager repo ---
      # helm repo add jetstack https://charts.jetstack.io
      # helm repo update

      # # --- Install cert-manager CRDs ---
      # sudo -u vagrant kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.14.1/cert-manager.crds.yaml

      # # --- Install cert-manager via Helm ---
      # helm install cert-manager jetstack/cert-manager \
      #   --namespace cert-manager --create-namespace \
      #   --version v1.14.1

      # echo "=== Waiting for cert-manager pods ==="
      # until [ $(sudo -u vagrant kubectl get pods -n cert-manager --no-headers 2>/dev/null | wc -l) -gt 0 ] && \
      #       [ $(sudo -u vagrant kubectl get pods -n cert-manager -o jsonpath='{.items[*].status.containerStatuses[*].ready}' | grep -c false || true) -eq 0 ]; do
      #   echo "Still waiting for cert-manager..."
      #   sleep 5
      # done
      # echo "cert-manager is ready!"

      # # Add ingress-nginx repo
      # helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
      # helm repo update

      # # Install ingress-nginx via Helm
      # helm install ingress-nginx ingress-nginx/ingress-nginx \
      #   --namespace ingress-nginx --create-namespace

      # echo "=== Waiting for ingress-nginx controller pod ==="
      # until [ $(kubectl get pods -n ingress-nginx -l app.kubernetes.io/component=controller --no-headers 2>/dev/null | wc -l) -gt 0 ] && \
      #       [ $(kubectl get pods -n ingress-nginx -l app.kubernetes.io/component=controller -o jsonpath='{.items[*].status.containerStatuses[*].ready}' | grep -c false || true) -eq 0 ]; do
      #   echo "Ingress controller not ready, sleeping..."
      #   sleep 5
      # done
      # echo "Ingress-nginx is ready!"

      # sudo -u vagrant kubectl apply -f /vagrant/clusterissuer.yaml


      # Install Argo CD (minimal)
      sudo -u vagrant kubectl create namespace argocd || true
      sudo -u vagrant kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml

      echo "=== Waiting for Argo CD pods ==="
      until [ $(sudo -u vagrant kubectl get pods -n argocd --no-headers 2>/dev/null | wc -l) -gt 0 ] && \
            [ $(sudo -u vagrant kubectl get pods -n argocd -o jsonpath='{.items[*].status.containerStatuses[*].ready}' | grep -c false || true) -eq 0 ]; do
        echo "Still waiting for Argo CD..."
        sleep 5
      done
      echo "Argo CD is ready!"


      # echo "=== Installing KubeArmor Operator ==="
      # sudo -u vagrant helm repo add kubearmor https://kubearmor.github.io/charts
      # sudo -u vagrant helm repo update

      # sudo -u vagrant helm upgrade --install kubearmor-operator kubearmor/kubearmor-operator \
      #   -n kubearmor --create-namespace

      # # Wait until KubeArmor operator pod is ready
      # echo "=== Waiting for KubeArmor pods ==="
      # until [ $(sudo -u vagrant kubectl get pods -n kubearmor --no-headers 2>/dev/null | wc -l) -gt 0 ] && \
      #       [ $(sudo -u vagrant kubectl get pods -n kubearmor -o jsonpath='{.items[*].status.containerStatuses[*].ready}' | grep -c false || true) -eq 0 ]; do
      #   echo "KubeArmor not ready, sleeping..."
      #   sleep 5
      # done
      # echo "KubeArmor is ready!"

      # # Apply sample config to deploy DaemonSets
      # sudo -u vagrant kubectl apply -f https://raw.githubusercontent.com/kubearmor/KubeArmor/main/pkg/KubeArmorOperator/config/samples/sample-config.yml
      # echo "KubeArmor sample config applied âœ…"


      # # --- Generate TLS certs as vagrant user ---
      # sudo -u vagrant openssl genrsa -out /home/vagrant/tls.key 2048
      # sudo -u vagrant openssl req -new -x509 -key /home/vagrant/tls.key -out /home/vagrant/tls.crt -days 365 -subj "/CN=wisecow.local/O=wisecow"

      # # Create namespace + secret
      # sudo -u vagrant kubectl create namespace wisecow || true
      # sudo -u vagrant kubectl create secret tls wisecow-tls --cert=/home/vagrant/tls.crt --key=/home/vagrant/tls.key -n wisecow || true

      # # --- Add hosts entry for local DNS ---
      # if ! grep -q "wisecow.local" /etc/hosts; then
      #   echo "192.168.56.10 wisecow.local" | sudo tee -a /etc/hosts
      # fi
      
      # === End TLS certs ===


      # Deploy Wisecow app via ArgoCD Application manifest
      sudo -u vagrant kubectl apply -f /vagrant/wisecow-argo-application.yaml


      echo "=== Cluster + ArgoCD + Wisecow setup complete ==="
    SHELL
  end
end
